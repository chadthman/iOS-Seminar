First Assignment:

The first assignment for iOS is this:

1) Create an iOS project in Xcode and run it in the simulator.
2) In Interface Builder, add a label to your base view controller and
change its text to read, "iOS assignment 1".
3) Add a button and a callback function for it.
4) In the button callback, toggle the label's text between two string
constants (the contents are up to you).
5) Create a GitHub repository for this course and check your project
into it. Give me (johnabender) push and pull rights to your course
repository. Email me so I can correlate your real name with your
repository name.
6) I'll check out your code, make a change, and check in the change.
You'll need to pull my changes and send me an email summarizing what I
changed.

Second Assignment

1) Build an app whose main view controller has a child view
controller. Lay out both view controllers in Interface Builder (in a
storyboard), although your main view controller's viewDidLoad function
will need code to instantiate and add the child view controller. See
the UIStoryboard documentation, especially
instantiateViewControllerWithIdentifier.
2) The child view controller's view should contain three subviews,
identical in size with different background colors. Each subview
should be an instance of a custom UIView subclass that uses
UIBezierPath to draw one of three different patterns inside the view.
(Like, if(patternToDraw==0){} else if(patternToDraw == 1){} else
if(patternToDraw==2){} ...)
3) The child view controller should expose a method that alters the
pattern drawn in its subviews (e.g., change the value of patternToDraw
and refresh the screen).
4) The main view should have a button with a callback function in the
main view controller.
5) When the button is pressed, the main view controller should call
the alter-drawing method on the child view controller.

Third assignment:

1) Make an iPad app using the master/detail template.
2) Instead of a table view controller as the master, make a new custom
view controller with a few buttons. Each button should load a
different detail view controller class. For convenience, you could
differentiate your view controller classes using their view's
background color.
3) One of your detail view controllers should be a tab bar controller.
It should have a few tabs that each load a different view controller
class.
4) At least one of the view controllers shown in a tab should be the
same class as one of the master's detail view controllers (i.e., the
tab bar can contain one of its own siblings).
5) At least two of the view controllers shown in a tab should be
navigation controllers. These should contain buttons to push
additional view controllers onto the navigation controller's stack,
and you should see different stacks maintained when you change between
these two tabs.

Fourth Assignment:

1) Make an app where the root view controller is a
UICollectionViewController. Set the UICollectionView to scroll
horizontally.
2) The collection view should have many (~10) sections and just enough
rows per section to fill the screen vertically (at the default cell
size, this is 7 rows per section).
3) When you tap (select) a cell, it should change its background color.
4) You should only allow one cell per section to be selected, in the
spirit of a radio button. When you select a different cell in that
section, the previously colored cell should revert to the default
background color. Each section should be selectable in this way. The
result of this will look something like the attached screenshot (note
that the collection view adds space between cells in a section
(vertically), but no space between sections (horizontally)).
5) When you scroll the collection horizontally and back, it should
remember which cell in each section was colored.

Fifth Assignment:

1) Take a look at the code in the weather-json project in the class
GitHub repo. It has the URL of the web server holding the weather data
and some code to extract the JSON into NSArrays and NSDictionaries.
2) Use a UIPickerView and a UIDatePicker in an app to prompt the user
to select a weather variable (such as "csnowsfc") and one of the
available dates/times in the weather data. Then display the models'
predicted values for that variable at that time in a UITextView. 